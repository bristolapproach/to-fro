{"version":3,"sources":["admin.js"],"names":["ATTR_EDITED","getData","element","document","getElementById","JSON","parse","innerText","setupHelpTypeDefaultRequirements","$","data","action_requirements_for_help_types","on","target","defaultRequirements","value","window","SelectBox","move_all","options","toArray","option","selected","indexOf","parseInt","move","setupActionDescriptionTemplates","action_description_templates","templates","forEach","descriptionType","$field","descriptionTemplate","val","trim","hasAttribute","removeAttr","currentHelpType","setAttribute","setupConfirmNavigationIfEdited","submitted","one","addEventListener","event","preventDefault","returnValue","setupUserAccountsBehaviour","setUserFieldPlaceholder","prop","trigger","setupUserAjaxUrl","profile_type","profile_id","url","new_url","placeholder","getPlaceholder","select2","django","jQuery"],"mappings":"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","file":"admin.js","sourceRoot":"..","sourcesContent":["// Attribute for marking a field as edited\nconst ATTR_EDITED = 'data-edited';\n\n(function () {\n  // Wait for everything to be loaded, especially jQuery\n  document.addEventListener('DOMContentLoaded', () => {\n    if (window.django) {\n      const $ = window.django.jQuery;\n      const data = getData(); // Read the data passed by the backend\n\n      setupUserAjaxUrl($, data);\n\n      // Wait until all Django related setup code has run\n      // so we don't respond to synthetic change events triggered\n      // during their initialization\n      $(function () {\n        setupActionDescriptionTemplates($, data);\n        setupHelpTypeDefaultRequirements($, data);\n        setupUserAccountsBehaviour($);\n        setupConfirmNavigationIfEdited($);\n      });\n    }\n  });\n})();\n\n\nfunction getData() {\n  const element = document.getElementById('js-data');\n  if (element) {\n    return JSON.parse(element.innerText);\n  }\n  return {};\n}\n\n/**\n * Manages the pre-filling of requirements according\n * to the default requirements associated to the selected help type\n * @param {jQuery} $ \n * @param {Object} data \n */\nfunction setupHelpTypeDefaultRequirements($, data) {\n  if (data.action_requirements_for_help_types) {\n  \n    $(document).on('change', '[name=\"help_type\"]', function ({ target }) {\n      const defaultRequirements = data.action_requirements_for_help_types[target.value] || [];\n     \n      // Clear the selected options, using Django's SelectBox API\n      // as there is some caching behind the scene that breaks if \n      // moving only the HTML elements\n      window.SelectBox.move_all('id_requirements_to','id_requirements_from')\n\n      // We need to grab the list of options each time, \n      // looks like elements are re-created by the move_all\n      const options = $('.field-requirements option').toArray();\n      for (option of options) {\n        // Mark options as selected as needed by the help type requirements\n        option.selected = defaultRequirements.indexOf(parseInt(option.value)) != -1\n      }\n    \n      // And move the selected options to the selected box\n      window.SelectBox.move('id_requirements_from','id_requirements_to')\n    });\n  }\n}\n\n/**\n * Manages the prefilling of action descriptions according\n * to the templates corrsponding to the selecte help type\n * @param {jQuery} $ \n * @param {Object} data - The hash of data passed to the view\n */\nfunction setupActionDescriptionTemplates($, data) {\n  if (data.action_description_templates) {\n    $(document).on('change', '[name=\"help_type\"]', function ({ target }) {\n      const templates = data.action_description_templates[target.value] || {};\n\n      // Loop through the fields that we have templates for.\n      ['public', 'private'].forEach((descriptionType) => {\n        const $field = $(`[name=\"${descriptionType}_description\"]`);\n        const descriptionTemplate = templates[`${descriptionType}_description_template`]\n        const currentDescription = ($field.val() || \"\").trim();\n\n        // If the current description is empty or is the template, we can update it.\n        if (!currentDescription || !$field[0].hasAttribute('data-edited')) {\n          $field.val(descriptionTemplate)\n          $field.removeAttr('data-edited');\n        }\n\n      })\n\n      currentHelpType = target.value;\n    })\n\n    // Track editions of descriptions to prevent replacement of edited value\n    $(document).on('input', '[name=\"public_description\"],[name=\"private_description\"]', function ({ target }) {\n      target.setAttribute('data-edited', '');\n    });\n  }\n}\n\n/**\n * Adds a confirmation before navigation if users\n * have edited anything on the page\n * @param {jQuery} $ \n */\nfunction setupConfirmNavigationIfEdited($) {\n  let submitted;\n  $(document).on('submit', function () {\n    submitted = true;\n  });\n  $(document).one('change', function () {\n    window.addEventListener('beforeunload', (event) => {\n      if (!submitted) {\n        // Cancel the event as stated by the standard.\n        event.preventDefault();\n        // Chrome requires returnValue to be set.\n        event.returnValue = '';\n        return `Looks like you've edited some data and not saved it yet. If you navigate away, you'll lose those changes. \n        \n        Are you sure you want to continue?\n        `\n      }\n    });\n  });\n}\n\n/**\n * Manages the user account fields in the volunteer and coordinator\n * forms\n * @param {jQuery} $ \n */\nfunction setupUserAccountsBehaviour($) {\n  // Controls which placeholder is shown, depending on whether an account is needed\n  // or not\n  $(document).on('change', '[name=\"user_without_account\"]', function () {\n    setUserFieldPlaceholder($);\n  });\n  setUserFieldPlaceholder($);\n\n  // Unchecks the \"user_without_account\" when picking an account in the list of users\n  $(document).on('change', '[name=\"user\"]', function ({ target }) {\n    if (target.value) {\n      $('[name=\"user_without_account\"]')\n        .prop('checked', false)\n        .trigger('change');\n\n    }\n  });\n}\n\nfunction setupUserAjaxUrl($, { profile_type, profile_id }) {\n  if (profile_type) {\n    const url = $('[name=\"user\"]').data('ajax--url');\n    if (url) {\n      let new_url = `${url}?without_profile_type=${profile_type}`\n      if (profile_id) {\n        new_url = `${new_url}&profile_id=${profile_id}`\n      }\n      $('[name=\"user\"').data('ajax--url', new_url)\n    }\n  }\n}\n\nfunction setUserFieldPlaceholder($) {\n  const placeholder = getPlaceholder($);\n  // Use jQuery's `data` rather than set the attribute\n  // as the attribute wouldn't get read\n  $('[name=\"user\"]').data('placeholder', placeholder);\n  $('[name=\"user\"]').select2({ placeholder });\n}\n\nfunction getPlaceholder($) {\n  if ($('[name=\"user_without_account\"]').prop('checked')) {\n    return 'No account required';\n  } else {\n    return 'Automatically create a new account';\n  }\n}\n"]}